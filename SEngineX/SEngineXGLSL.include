
struct DirectionalLight {
    vec4 color;
    vec4 direction;
};

struct PointLight {
    vec4 position;
    vec4 color;
    float constant;
    float linear;
    float quadratic;
 //   float pad;
};

#define NR_POINT_LIGHTS 4

layout (std140) uniform InternalData
{
    vec4 Ambient;
    vec4 ViewPos;
    PointLight pointLights[4];
    DirectionalLight directionalLights[2];
    float NumberOfPointLights;
    float NumberOfDirectionalLights;
} Lights;

struct LightingResult {
    vec3 diffuse;
    vec3 specular;
};

LightingResult _Lighting_Directional(DirectionalLight light, vec3 normal, vec3 viewDir)
{
    LightingResult result;
    
    vec3 lightDir = normalize(-light.direction.xyz);
    
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.Shininess);
    
    result.diffuse = light.color.xyz * diff;
    result.specular = light.color.xyz * spec;
    
    return result;
}

// Calculates the color when using a point light.
LightingResult _Lighting_Point(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    LightingResult result;
    
    vec3 lightDir = normalize(light.position.xyz - fragPos);
    
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir.xyz, reflectDir), 0.0), material.Shininess);
    // Attenuation
    float distance = length(light.position.xyz - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
    // Combine results
    
    result.diffuse = light.color.xyz * diff * attenuation;
    result.specular = light.color.xyz * spec * attenuation;
    
    return result;
}